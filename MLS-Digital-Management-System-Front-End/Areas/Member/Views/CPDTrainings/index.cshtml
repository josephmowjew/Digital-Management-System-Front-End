@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "CPD Trainings";
    Layout = "~/Areas/Member/Views/shared/_Layout.cshtml";

    var host = Configuration.GetSection("APIURL")["Link"];
}

@section Styles {

    <style>
           .hidden {
  display: none;
}
    </style>


}



<div class="card  w-100 h-100 d-flex justify-content-center">
    <div class="card-body">
      
       <div>
            <img src="~/assets/images/91.gif" id="spinner" />
        </div>

        @if (ViewBag.membership) {
            

                @if (ViewBag.member?.CustomerId == null) {
                    <button type="button" class="btn btn-info my-3">
                        <span>Contact finance officer</span>
                    </button>
                }
                else {
                    
                }
        }else{
            <a asp-area="Member" asp-action="ViewMember" asp-controller="Home" class="btn btn-warning my-3">Complete Membership Details</a>
        }
        
         <!-- Modal -->
        <div class="modal fade" id="register_cpd_training_modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <partial name="_RegisterTrainingPartial" />
        </div>

        <div class="modal fade" id="cpd_invoice_modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <partial name="_CPDInvoicePartial" />
        </div>

        <h5 class="card-title fw-semibold mb-4 text-uppercase text-center"> CPD's In Practice Year <strong>(@ViewBag.YearOfOperation.FormatedDate)</strong></h5>

        <div class="table-responsive">
            <table class="table table-bordered table-hover" id="cpd_table">
                <thead>
                    <tr>
                        <th>
                           Title
                        </th>
                        <th>
                           Duration(Hours)
                        </th>
                        <th>
                            Event Date
                        </th>
                        <th>
                           CPD Units 
                        </th>
                        <th>
                            Accrediting Institution
                        </th>
                        <th>
                            Reg Status
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>


@section Scripts{

    <script>
        var datatable;
        var tokenValue = '@ViewBag.token';
        var host = '@host';
        var isCustomerId = @Json.Serialize(ViewBag.CustomerId);
    </script>
    <script>
      $(function () {
        $('[data-toggle="tooltip"]').tooltip()
        })
     </script>
     <script src="~/js/FileUploadHandler.js" asp-append-version="true"></script>
     <script src="~/js/CPDTraining.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            datatable = $('#cpd_table').DataTable({


                "processing": true,
                "serverSide": true,
                "order": [[0, "desc"]],
                ajax: {
                    url: "@host/api/CPDTrainings/paged",
                    type: 'get',
                    datatype: 'Json', headers: {
                        'Authorization': 'Bearer @ViewBag.token'
                    },
                },
                columnDefs: [
                    {
                        defaultContent: "",
                        targets: "_all",
                        'orderable': true
                    },
                ],
                columns: [
                    {
                        data: "title",
                        name: "title",
                        className: "text-left",
                        "orderable": false,
                    },
                    {
                        data: "duration",
                        name: "duration",
                        className: "text-left",
                        "orderable": false,
                        render: function(data, type, row) {
                            return data;
                        }
                    },
                    {
                        data: "dateToBeConducted",
                        name: "dateToBeConducted",
                        className: "text-left",
                        "orderable": false,
                    },
                    {
                        data: "cpdUnitsAwarded",
                        name: "cpdUnitsAwarded",
                        className: "text-left",
                        "orderable": true,
                    },
                     {
                        data: "accreditingInstitution",
                        name: "accreditingInstitution",
                        className: "text-left",
                        "orderable": true,
                    },
                    {
                        data: "cpdTrainingRegistration",
                        name: "cpdTrainingRegistration",
                        orderable: false,
                        render: function(data, type, row) {
                            const registration = row.cpdTrainingRegistration.find(reg => reg.memberId === @ViewBag.MemberId);
                           if (!registration) {
                            const dueDate = row.registrationDueDate ? new Date(Date.parse(row.registrationDueDate)) : null;
                            const today = new Date();

                            if (dueDate) {
                                // Calculate the time difference in milliseconds
                                const timeDiff = dueDate.getTime() - today.getTime();
                                // Convert the time difference from milliseconds to days
                                const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
                                
                                if (daysDiff < 1) {
                                   
                                    return "<span class='badge bg-danger bg-opacity-85 rounded-pill'>Registration Closed</span>";
                                }
                            }

                            return "<span class='badge bg-danger bg-opacity-85 rounded-pill'>Not Registered</span>";
                        }

                            const { registrationStatus, deniedReason } = registration;
                            const badgeClasses = {
                            Attended: "bg-success",
                            Pending: "bg-secondary",
                            Denied: "bg-danger",
                            default: "bg-warning"
                            }[registrationStatus] || "bg-warning";

                            const badge = `<span class='badge ${badgeClasses} bg-opacity-85 rounded-pill' ${registrationStatus === "Denied" ? `data-toggle='tooltip' data-placement='right' title='${deniedReason}'` : ""}>${registrationStatus}</span>`;
                            return badge;
                        }
                    },
                  
                  {
                    data: "id",
                    name: "id",
                    "orderable": false,
                    render: function (data, type, row) {
                        const dueDate = new Date(row.registrationDueDate);
                        const today = new Date();
                        const dueDateOnly = dueDate.getDate();
                        const todayOnly = today.getDate();
                        var memberRegistration = row.cpdTrainingRegistration.find(registration => registration.memberId == @ViewBag.MemberId);
                        if (!memberRegistration) {

                           
                            const dueDate = row.registrationDueDate ? new Date(Date.parse(row.registrationDueDate)) : null;
                            const today = new Date();
                          
                            if (dueDate) {
                                // Calculate the time difference in milliseconds
                                const timeDiff = dueDate.getTime() - today.getTime();
                                // Convert the time difference from milliseconds to days
                                const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

                                var memberCustomerId = '@ViewBag.member?.CustomerId';
                                
                                let buttons = "";
                                if (daysDiff >= 1) {
                                    if(isCustomerId){
                                        

                                        if(row.isFree == false && row.invoiceRequestId == null)
                                        {
                                            

                                        }else{
                                            buttons += `<a href='#' onclick='cpdTrainingHandler.registerForm("${data}", "${JSON.stringify(row).replace(/"/g, "\\\"")}")' type='button' class='btn btn-outline-primary m-1 btn-sm ' title='register'> Register</a>`;

                                        }
                                        
                                        if (row.isFree != true && (row.invoiceRequest == null || row.invoiceRequest.customerId != memberCustomerId)) {
                                            buttons += "<a href='#' onclick='cpdTrainingHandler.invoiceForm(\"" + data + "\",\"" + JSON.stringify(row).replace(/"/g, "\\\"") + "\")' type='button' class='btn btn-outline-warning m-1 btn-sm ' title='Invoice'> Invoice</a>";
                                        }
                                        
                                        buttons += "<a href='/member/CPDTrainings/TrainingDetails/" + data + "' type = 'button' class='btn btn-outline-success m-1 btn-sm ti ti-eye text-lg' title = 'show details'> View </a>";
                                        
                                        return buttons;

                                    }else{
                                        return "<a href='/member/CPDTrainings/TrainingDetails/" + data +"' type = 'button' class='btn btn-outline-primary mx-1 btn-sm ti ti-eye text-lg' title = 'show details'> View </a>" + "<a href='#' onclick='cpdTrainingHandler.invoiceForm(\"" + data + "\",\"" + JSON.stringify(row).replace(/"/g, "\\\"") + "\")' type='button' class='btn btn-outline-warning m-1 btn-sm ' title='Invoice'> Invoice</a>";
                                    }
                                }
                                else {
                                    return "<a href='/member/CPDTrainings/TrainingDetails/" + data +"' type = 'button' class='btn btn-outline-primary mx-1 btn-sm ti ti-eye text-lg' title = 'show details'> View </a>";
                                }
                            }
                            else {
                                return "<a href='/member/CPDTrainings/TrainingDetails/" + data +"' type = 'button' class='btn btn-outline-primary mx-1 btn-sm ti ti-eye text-lg' title = 'show details'> View </a>";
                            }
                        }
                        if (memberRegistration && memberRegistration.registrationStatus === "Attended") {
                            return `<a href='#' onclick='cpdTrainingHandler.generateCertificate(${data})' type='button' class='btn btn-outline-info m-1 btn-sm' title='Generate Certificate'>Certificate</a> <a href='/member/CPDTrainings/TrainingDetails/" + data +"' type = 'button' class='btn btn-outline-primary mx-1 btn-sm ti ti-eye text-lg' title = 'show details'> View </a>`;
                        }
                    }
                }
                ],
                responsive: true,
                "autoWidth": false,
            });
        });

        
function formatCurrency(amount) {
    return new Intl.NumberFormat('en-MW', {
        style: 'currency',
        currency: 'MWK',
        minimumFractionDigits: 0
    }).format(amount);
}
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
