@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Invoice Requests on Trainings";
    Layout = "~/Areas/Member/Views/shared/_Layout.cshtml";

    var host = Configuration.GetSection("APIURL")["Link"];
    var apiPrefix = Configuration.GetSection("APISettings")["API_Prefix"];
}

<a onclick="window.history.back()" class="btn btn-secondary mx-2 my-2">Back </a>

<div>
    <img src="~/assets/images/91.gif" id="spinner" />
</div>
<div class="card">
    <div class="card-body">
        <h5 class="card-title fw-semibold mb-4 text-uppercase text-center">My cpd invoices</h5>
        <div class="table-responsive">
            <table class="table table-bordered" id="invoice_requests_table">
                <thead>
                    <tr>
                        <th>Member Name/Customer Name</th>
                        <th>CPD Title</th>
                        <th>Amount</th>
                        <th>Date Requested</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        var datatable;
        var tokenValue = '@ViewBag.token';
        var host = '@host';
    </script>

    <script src="~/js/FileUploadHandler.js" asp-append-version="true"></script>
    <script src="~/js/CPDTraining.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            datatable = $('#invoice_requests_table').DataTable({


                "processing": true,
                "serverSide": true,
                "order": [[0, "desc"]],
                ajax: {
                    url: '@host/api/InvoiceRequest/cpdInvoicesByMember',
                    type: 'get',
                    datatype: 'Json', headers: {
                        'Authorization': 'Bearer @ViewBag.token'
                    }

                },
                columnDefs: [
                    {
                        defaultContent: "",
                        targets: "_all",
                        'orderable': true
                    },
                ], 
                columns: [
                    {
                        data: "customer.customerName",
                        name: "CustomerId",
                        className: "text-left",
                        "orderable": false,
                    },
                    {
                        data: "referencedEntity.title",
                        name: "referencedEntity",
                        className: "text-left",
                        "orderable": false,
                    },
                    {
                        data: "amount",
                        name: "amount",
                        className: "text-left",
                        orderable: true,
                        render: function (data) {
                            return data.toLocaleString('en-MW', { style: 'currency', currency: 'MWK' })
                        }
                    },
                    {
                        data: "createdDate",
                        name: "createdDate",
                        className: "text-left",
                        orderable: true,
                        render: function (data) {
                            if (data) {
                                const date = new Date(data);
                                const day = ("0" + date.getDate()).slice(-2);
                                const month = ("0" + (date.getMonth() + 1)).slice(-2);
                                const year = date.getFullYear();
                                return `${year}-${month}-${day}`;
                            }
                            return '';
                        }
                    },
                    {
                        data: "status",
                        name: "status",
                        "orderable": true,
                        render: function (data) {
                            switch (data) {
                                case "Approved":
                                    return "<span class='badge bg-success bg-opacity-85 rounded-pill'>" + data + "</span>";
                                case "Pending":
                                    return "<span class='badge bg-secondary bg-opacity-85 rounded-pill'>" + data + "</span>";
                                case "Rejected":
                                    return "<span class='badge bg-danger bg-opacity-85 rounded-pill'>" + data + "</span>";
                                default:
                                    return "<span class='badge bg-warning bg-opacity-85 rounded-pill'>" + data + "</span>";
                            }
                        }
                    },
                    {
                        data: "id",
                        name: "id",
                        "orderable": false,
                        render: (data, type, row) => {
                            let buttonsHtml = `<div class="d-flex justify-content-center">`;

                            // Always add the View button with spacing
                            buttonsHtml += `
                            <a href='ViewInvoiceRequest?invoiceRequestId=${data}' class='btn btn-primary btn-sm mx-2'>View</a>
                        `;

                            buttonsHtml += `</div>`;

                            return buttonsHtml;
                        }
                    }


                ],
                responsive: true,
                "autoWidth": false,
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}