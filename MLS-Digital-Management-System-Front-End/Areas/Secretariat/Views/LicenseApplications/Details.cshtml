@using MLS_Digital_Management_System_Front_End.Core.DTOs.LicenseApprovalHistory
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@model MLS_Digital_Management_System_Front_End.Core.DTOs.LicenseApplication.ReadLicenseApplicationDTO;
@{
    ViewData["Title"] = "License Applications";
    Layout = "~/Areas/Secretariat/Views/shared/_Layout.cshtml";

    var host = Configuration.GetSection("APIURL")["Link"];
    var spanStyle = "";
    var apiPrefix =  Configuration.GetSection("APISettings")["API_Prefix"];
}
@section Styles {
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f6f8;
            color: #333;
        }
        .card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin: 20px 0;
            padding: 20px;
            background-color: #fff;
        }
        .card-header {
            background-color: #007bff;
            border-bottom: 1px solid #dee2e6;
            padding: 15px;
            border-radius: 8px 8px 0 0;
            color: #fff;
        }
        .card-title {
            margin: 0;
            font-weight: 500;
        }
        .card-body {
            padding: 20px;
        }
        .item {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .item:last-child {
            border-bottom: none;
        }
        dt {
            font-weight: 500;
            margin-bottom: 10px;
        }
        dd {
            margin-left: 0;
            margin-bottom: 10px;
        }
        .status-label {
            padding: 5px 10px;
            border-radius: 5px;
            color: #fff;
            font-weight: 500;
        }
        .status-yes {
            background-color: #28a745;
        }
        .status-no {
            background-color: #dc3545;
        }
        .attachment-container {
            margin-top: 10px;
        }
        .attachment-card {
            display: flex;
            align-items: center;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 10px;
            margin-right: 10px;
            background-color: #f8f9fa;
        }
        .attachment-card i {
            margin-right: 10px;
            color: #007bff;
        }
        .attachment-card .btn {
            margin-left: auto;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }
        .collapsible {
            cursor: pointer;
            padding: 10px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            background-color: #f8f9fa;
            margin-bottom: 10px;
        }
        .active, .collapsible:hover {
            background-color: #e2e6ea;
        }
        .content {
            padding: 0 18px;
            display: none;
            overflow: hidden;
            background-color: #f9f9f9;
            margin-bottom: 10px;
        }
        .row {
        display: flex;
        flex-wrap: nowrap;
        }

        .col-8 {
        flex: 0 0 66.666667%;
        overflow-y: auto;
        max-height: 100vh; /* Set the maximum height to the viewport height */
        padding-right: 15px;
        }

        .col-4 {
        flex: 0 0 33.333333%;
        overflow-x: auto;
        max-height: 100vh; /* Set the maximum height to the viewport height */
        padding-left: 15px;
        }
    </style>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://unpkg.com/bs-brain@2.0.4/tutorials/timelines/timeline-2/assets/css/timeline-2.css">
}

<a asp-action="index" asp-controller="LicenseApplications" asp-area="Secretariat" class="btn btn-secondary">Back To Appliactions</a>

 <div class="modal fade" id="deny_license_application_modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <partial name="_DenyFormPartial" />
        </div>
<div class="card">
    <div class="card-header">
        <h5 class="card-title text-center text-white text-uppercase">License Application Details</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-8">
                <div class="item">
                    <dt>Application Status</dt>
                    <dd>@Model.ApplicationStatus</dd>
                </div>
                <div class="item">
                    <dt>Year of Practice</dt>
                    <dd>@Model.YearOfOperation.StartDate.Year - @Model.YearOfOperation.EndDate.Year</dd>
                </div>
            
                <div class="item">
                    <dt>Current Approval Level</dt>
                    <dd>@Model.CurrentApprovalLevel.Level</dd>
                </div>
                <div class="item">
                    <dt>Member</dt>
                    <dd><i class="fa fa-user"></i> @Model.Member.User.FullName</dd>
                </div>
                @if (Model?.Member?.Firm != null)
                {
                    <div class="item">
                        <dt>Firm</dt>
                        <dd><i class="fa fa-building"></i> @Model.Member.Firm.Name</dd>
                    </div>
                }
                
                <div class="item">
                    <dt>First Application for License</dt>
                    <dd>
                        <span class="status-label @(Model.FirstApplicationForLicense ? "status-yes" : "status-no")">
                            @(Model.FirstApplicationForLicense ? "Yes" : "No")
                        </span>
                        @if (Model.FirstApplicationForLicense && Model.Attachments.Any(a => a.PropertyName.Contains("CertificateOfAdmissionAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("CertificateOfAdmissionAttachment")))
                                {
                                <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        }
                    </dd>
                </div>

                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Renewed License Previous Year</dt>
                    <dd>
                        <span class="status-label @(Model.RenewedLicensePreviousYear ? "status-yes" : "status-no")">
                            @(Model.RenewedLicensePreviousYear ? "Yes" : "No")
                        </span>
                        @if (Model.RenewedLicensePreviousYear && Model.Attachments.Any(a => a.PropertyName.Contains("RenewedLicensePreviousYearAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("RenewedLicensePreviousYearAttachment")))
                                {
                                <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        } 
                    </dd>
                </div>
                }

                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Obtained Leave to Renew License Out of Time</dt>
                    <dd>
                        <span class="status-label @(Model.ObtainedLeaveToRenewLicenseOutOfTime ? "status-yes" : "status-no")">
                            @(Model.ObtainedLeaveToRenewLicenseOutOfTime ? "Yes" : "No")
                        </span>
                    </dd>
                </div>
                }
                <div class="item">
                    <dt>Paid Annual Subscription to Society</dt>
                    <dd>
                        <span class="status-label @(Model.PaidAnnualSubscriptionToSociety ? "status-yes" : "status-no")">
                            @(Model.PaidAnnualSubscriptionToSociety ? "Yes" : "No")
                        </span>
                        @if (Model.PaidAnnualSubscriptionToSociety && Model.Attachments.Any(a => a.PropertyName.Contains("PaidAnnualSubscriptionToSocietyAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("PaidAnnualSubscriptionToSocietyAttachment")))
                                {
                                <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        }
                        else if(!Model.PaidAnnualSubscriptionToSociety && !Model.FirstApplicationForLicense && !string.IsNullOrEmpty(Model.ExplanationForNoAnnualSubscriptionToSociety)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoAnnualSubscriptionToSociety</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Complied With Penalties Imposed Under The Act</dt>
                    <dd>
                        <span class="status-label @(Model.CompliedWithPenaltiesImposedUnderTheAct ? "status-yes" : "status-no")">
                            @(Model.CompliedWithPenaltiesImposedUnderTheAct ? "Yes" : "No")
                        </span>
                        @if (Model.CompliedWithPenaltiesImposedUnderTheAct && Model.Attachments.Any(a => a.PropertyName.Contains("PaidAnnualSubscriptionToSocietyAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("CompliedWithPenaltiesImposedUnderTheActAttachment")))
                                {
                                <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        }else if(!Model.CompliedWithPenaltiesImposedUnderTheAct && !string.IsNullOrEmpty(Model.ExplanationForNoComplianceWithPenalties)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoComplianceWithPenalties</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                }

                <div class="item">
                    <dt>Made Contribution to Fidelity Fund</dt>
                    <dd>
                        <span class="status-label @(Model.MadeContributionToFidelityFund ? "status-yes" : "status-no")">
                            @(Model.MadeContributionToFidelityFund ? "Yes" : "No")
                        </span>
                        @if (Model.MadeContributionToFidelityFund && Model.Attachments.Any(a => a.PropertyName.Contains("MadeContributionToFidelityFundAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("MadeContributionToFidelityFundAttachment")))
                                { 
                                        
                                    <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        }
                        else if(!Model.MadeContributionToFidelityFund && !string.IsNullOrEmpty(Model.ExplanationForNoContributionToFidelityFund)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoContributionToFidelityFund</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Remitted Society's Levy</dt>
                    <dd>
                        <span class="status-label @(Model.RemittedSocietysLevy ? "status-yes" : "status-no")">
                            @(Model.RemittedSocietysLevy ? "Yes" : "No")
                        </span>
                        @if (Model.RemittedSocietysLevy && Model.Attachments.Any(a => a.PropertyName.Contains("RemittedSocietysLevyAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("RemittedSocietysLevyAttachment")))
                                {
                                    <a href="@attachment.FilePath" target="_blank" class="attachment-card"><i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                }
                            </div>
                        }
                        else if(!Model.RemittedSocietysLevy && !string.IsNullOrEmpty(Model.ExplanationForNoSocietysLevy)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoSocietysLevy</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                }

                <div class="item">
                    <dt>Made Contribution to MLS Building Project Fund</dt>
                    <dd>
                        <span class="status-label @(Model.MadeContributionToMLSBuildingProjectFund ? "status-yes" : "status-no")">
                            @(Model.MadeContributionToMLSBuildingProjectFund ? "Yes" : "No")
                        </span>
                        @if (Model.MadeContributionToMLSBuildingProjectFund && Model.Attachments.Any(a => a.PropertyName.Contains("MadeContributionToMLSBuildingProjectFundAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("MadeContributionToMLSBuildingProjectFundAttachment")))
                                {
                                
                                    <a href="@attachment.FilePath" target="_blank" class="attachment-card"> <i class="fa fa-paperclip"></i> @attachment.FileName</a>
                                    
                                }
                            </div>
                        }
                        else if(!Model.MadeContributionToMLSBuildingProjectFund && !string.IsNullOrEmpty(Model.ExplanationForNoContributionToMLSBuildingProjectFund)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoContributionToMLSBuildingProjectFund</span>
                            </div>
                        
                        }
                    </dd>
                </div>

                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Performed Full Mandatory Pro Bono Work</dt>
                    <dd>
                        <span class="status-label @(Model.PerformedFullMandatoryProBonoWork ? "status-yes" : "status-no")">
                            @(Model.PerformedFullMandatoryProBonoWork ? "Yes" : "No")
                        </span>
                        @if (Model.PerformedFullMandatoryProBonoWork && Model.Attachments.Any(a => a.PropertyName.Contains("PerformedFullMandatoryProBonoWorkAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("PerformedFullMandatoryProBonoWorkAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                        else if(!Model.PerformedFullMandatoryProBonoWork && !string.IsNullOrEmpty(Model.ExplanationForNoFullMandatoryProBonoWork)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoFullMandatoryProBonoWork</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                }

                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Attained Minimum Number of CLE Units</dt>
                    <dd>
                        <span class="status-label @(Model.AttainedMinimumNumberOfCLEUnits ? "status-yes" : "status-no")">
                            @(Model.AttainedMinimumNumberOfCLEUnits ? "Yes" : "No")
                        </span>
                        @*@if(!Model.AttainedMinimumNumberOfCLEUnits && !string.IsNullOrEmpty(Model.ExplanationForNoMinimumNumberOfCLEUnits)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoMinimumNumberOfCLEUnits</span>
                            </div>
                        
                        }*@
                        @if (Model.AttainedMinimumNumberOfCLEUnits && Model.Attachments.Any(a => a.PropertyName.Contains("AttainedMinimumNumberOfCLEUnitsAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("AttainedMinimumNumberOfCLEUnitsAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                        else if (Model.AttainedMinimumNumberOfCLEUnits && !string.IsNullOrEmpty(Model.ExplanationForMinimumNumberOfCLEUnits)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForMinimumNumberOfCLEUnits</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                }
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Valid Annual Professional Indemnity Insurance Cover</dt>
                    <dd>
                        <span class="status-label @(Model.HasValidAnnualProfessionalIndemnityInsuranceCover ? "status-yes" : "status-no")">
                            @(Model.HasValidAnnualProfessionalIndemnityInsuranceCover ? "Yes" : "No")
                        </span>
                        @if (Model.HasValidAnnualProfessionalIndemnityInsuranceCover && Model.Attachments.Any(a => a.PropertyName.Contains("ValidAnnualProfessionalIndemnityInsuranceCoverAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("ValidAnnualProfessionalIndemnityInsuranceCoverAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                        else if(!Model.HasValidAnnualProfessionalIndemnityInsuranceCover && !string.IsNullOrEmpty(Model.ExplanationForNoProfessionalIndemnityInsuranceCover)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoProfessionalIndemnityInsuranceCover</span>
                            </div>
                        
                        }
                    </dd>
                </div>
                }
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Submitted Valid Tax Clearance Certificate</dt>
                    <dd>
                        <span class="status-label @(Model.SubmittedValidTaxClearanceCertificate ? "status-yes" : "status-no")">
                            @(Model.SubmittedValidTaxClearanceCertificate ? "Yes" : "No")
                        </span>
                        @if (Model.SubmittedValidTaxClearanceCertificate && Model.Attachments.Any(a => a.PropertyName.Contains("SubmittedValidTaxClearanceCertificateAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("SubmittedValidTaxClearanceCertificateAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                        else if(!Model.SubmittedValidTaxClearanceCertificate && !string.IsNullOrEmpty(Model.ExplanationForNoValidTaxClearanceCertificate)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoValidTaxClearanceCertificate</span>
                            </div>
                        }
                    </dd>
                </div>
                }
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Submitted Accountant's Certificate</dt>
                    <dd>
                        <span class="status-label @(Model.SubmittedAccountantsCertificate ? "status-yes" : "status-no")">
                            @(Model.SubmittedAccountantsCertificate ? "Yes" : "No")
                        </span>
                        @if (Model.SubmittedAccountantsCertificate && Model.Attachments.Any(a => a.PropertyName.Contains("SubmittedAccountantsCertificateAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("SubmittedAccountantsCertificateAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                        else if(!Model.SubmittedAccountantsCertificate && !string.IsNullOrEmpty(Model.ExplanationForNoAccountantsCertificate)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoAccountantsCertificate</span>
                            </div>
                        }
                    </dd>
                </div>
                }
                @if(!Model.FirstApplicationForLicense){
                <div class="item">
                    <dt>Attained Minimum Number of CLE Units</dt>
                    <dd>
                        <span class="status-label @(Model.AttainedMinimumNumberOfCLEUnits ? "status-yes" : "status-no")">
                            @(Model.AttainedMinimumNumberOfCLEUnits ? "Yes" : "No")
                        </span>
                        @if(!Model.AttainedMinimumNumberOfCLEUnits && !string.IsNullOrEmpty(Model.ExplanationForNoMinimumNumberOfCLEUnits)){
                            <div class="my-3 text-warning"><strong>Explanation:</strong>
                                <span class=text-muted>@Model.ExplanationForNoMinimumNumberOfCLEUnits</span>
                            </div>
                        
                        }
                        else if (Model.AttainedMinimumNumberOfCLEUnits && Model.Attachments.Any(a => a.PropertyName.Contains("AttainedMinimumNumberOfCLEUnitsAttachment")))
                        {
                            <button class="collapsible">Attachments</button>
                            <div class="content attachment-container">
                                @foreach (var attachment in Model.Attachments.Where(a => a.PropertyName.Contains("AttainedMinimumNumberOfCLEUnitsAttachment")))
                                {
                                    <div class="attachment-card">
                                        <i class="fa fa-paperclip"></i> @attachment.FileName
                                        <a href="@attachment.FilePath" target="_blank" class="btn btn-primary btn-sm">View Attachment</a>
                                    </div>
                                }
                            </div>
                        }
                    </dd>
                </div>
                }
                @if(Model.ApplicationStatus !="Denied" && Model.ApplicationStatus !="Approved" && Model.CurrentApprovalLevel.Department.Name.Equals("Administration and Operations", StringComparison.OrdinalIgnoreCase)){
                    <div class="item">
                        <button id="approve_license_application_btn"  class="btn btn-success" onclick="formHandler.acceptApplication('@Model.Id')">Verify Application</button>
                        <button id="reject_license_application_btn" class="btn btn-danger" onclick="formHandler.denyForm('@Model.Id')">Deny Application</button>
                    </div>
                }
                <div class="item">
                    <div>
                        <img src="~/assets/images/91.gif" id="spinner" />
                    </div>
                </div>  
            </div>
            <div class="col-4">
                <div>
                    <h5 class="text-center text-uppercase">Application History</h5>
                   <section class="bsb-timeline-2 ">
                        <div class="container">
                        <div class="row justify-content-center">            
                            <ul class="timeline">
                                @foreach (var approvalHistory in @ViewBag.licenseApprovalHistoryList as List<ReadLicenseApprovalHistoryDTO>)
                                {
                                <li class="timeline-item">
                                @if (approvalHistory.Status.Equals("Denied", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            spanStyle ="background-color: #dc3545;";
                                        }else if(approvalHistory.Status.Equals("Approved", StringComparison.CurrentCultureIgnoreCase)){
                                            spanStyle ="background-color: green;";
                                        }else if(approvalHistory.Status.Equals("Pending", StringComparison.CurrentCultureIgnoreCase)){
                                            spanStyle ="background-color: #f2aa00;";
                                        }else{
                                            spanStyle ="background-color: #49BEFF;";
                                        }
                                            <span class="timeline-icon" style="@spanStyle">
                                        @if (approvalHistory.Status.Equals("Under Review", StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            <i class="bi-hourglass-split text-white" style="font-size: 1.5rem;"></i>
                                            
                                        }
                                        else if(approvalHistory.Status.Equals("Approved", StringComparison.CurrentCultureIgnoreCase))   
                                        {
                                            <i class="bi-check-lg text-white" style="font-size: 1.5rem;"></i>
                                        }
                                         else if(approvalHistory.Status.Equals("Pending", StringComparison.CurrentCultureIgnoreCase))   
                                        {
                                            <i class="bi-hourglass text-white" style="font-size: 1.5rem;"></i>
                                        }
                                        else{
                                            <i class="bi-x-square text-white" style="font-size: 1.5rem;"></i>
                                        }
                                    </span>
                                        <div class="timeline-body">
                                            <div class="timeline-content">
                                            <div class="card border-0">
                                                <div class="card-body p-0">
                                                <h4 class="card-subtitle text-secondary mb-1">@approvalHistory.ChangeDate.ToString("dd-MM-yyyy")</h4>
                                                <h5 class="card-title mb-3">
                                                    @approvalHistory.Status
                                                    
                                                </h5>
                                                @if(!approvalHistory.Status.Equals("Denied",StringComparison.CurrentCultureIgnoreCase))
                                                    {
                                                        <span>The application was transfered to the department of <strong>@approvalHistory.ApprovalLevel.Department.Name</strong></span>
                                                    }else{
                                                        <span>The application was denied by the department of <strong>@approvalHistory.ApprovalLevel.Department.Name</strong></span>
                                                    }
                                                </div>
                                            </div>
                                            </div>
                                        </div>
                                    </li>
                                }
                            
                    
                            
                            </ul>
                        </div>
                        </div>
                 </section>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var tokenValue = '@ViewBag.token';
        var host = `@host`;
    </script>
    <script src="~/js/FileUploadHandler.js" asp-append-version="true"></script>
    <script src="~/js/LicenseApplication2.js" asp-append-version="true"></script>
    <script src="~/assets/js/custom_select.js" asp-append-version="true"></script>
    <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function() {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }
    </script>
}
